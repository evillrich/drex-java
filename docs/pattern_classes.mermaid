classDiagram
    class PatternElement {
        <<abstract>>
        +getComment() string
        +compileElement() void
        +accept(visitor) T
    }

    class CompositePatternElement {
        <<abstract>>
        +getElements() List~PatternElement~
        +getElementCount() int
        +isEmpty() boolean
    }

    class GroupingPatternElement {
        <<abstract>>
        +getBindObject() string
    }

    class LineElement {
        <<abstract>>
        +getBindProperties() List~PropertyBinding~
    }

    class DrexPattern {
        <<class>>
        -string version
        -string name  
        -string comment
        -string bindObject
        -Integer editDistance
        -List~PatternElement~ elements
        +getVersion() string
        +getName() string
        +getComment() string
        +getBindObject() string
        +getEditDistance() Integer
        +getElements() List~PatternElement~
        +isFuzzyMatchingEnabled() boolean
        +builder() DrexPatternBuilder
        +accept(visitor) T
    }

    class Group {
        <<class>>
        -string comment
        -string bindObject
        -List~PatternElement~ elements
        +getComment() string
        +getBindObject() string
        +getElements() List~PatternElement~
        +builder() GroupBuilder
        +accept(visitor) T
    }

    class Repeat {
        <<class>>
        -string comment
        -Mode mode
        -string bindArray
        -List~PatternElement~ elements
        +getComment() string
        +getMode() Mode
        +getBindArray() string
        +getElements() List~PatternElement~
        +requiresMatch() boolean
        +allowsMultiple() boolean
        +builder() RepeatBuilder
        +accept(visitor) T
    }

    class Or {
        <<class>>
        -string comment
        -List~PatternElement~ elements
        +getComment() string
        +getElements() List~PatternElement~
        +getAlternatives() List~PatternElement~
        +getAlternativeCount() int
        +builder() OrBuilder
        +accept(visitor) T
    }

    class Line {
        <<class>>
        -string comment
        -string regex
        -List~PropertyBinding~ bindProperties
        -Pattern compiledPattern
        +getComment() string
        +getRegex() string
        +getBindProperties() List~PropertyBinding~
        +getCompiledPattern() Pattern
        +compiledPattern() Pattern
        +getBindingCount() int
        +hasBindings() boolean
        +getCaptureGroupCount() int
        +builder() LineBuilder
        +compileElement() void
        +accept(visitor) T
    }

    class Anyline {
        <<class>>
        -string comment
        -List~PropertyBinding~ bindProperties
        +getComment() string
        +getBindProperties() List~PropertyBinding~
        +getBindingCount() int
        +hasBindings() boolean
        +builder() AnylineBuilder
        +compileElement() void
        +accept(visitor) T
    }

    class Mode {
        <<enumeration>>
        ZERO_OR_MORE
        ONE_OR_MORE
        ZERO_OR_ONE
        +requiresMatch() boolean
        +allowsMultiple() boolean
        +getMaxMatches() int
        +getMinMatches() int
    }

    class PropertyBinding {
        <<class>>
        -string property
        -string format
        +getProperty() string
        +getFormat() string
        +hasFormat() boolean
        +of(property) PropertyBinding
        +of(property, format) PropertyBinding
    }


%% Relationships
    PatternElement <|-- CompositePatternElement : extends
    PatternElement <|-- LineElement : extends

    CompositePatternElement <|-- GroupingPatternElement : extends
    GroupingPatternElement <|-- DrexPattern : extends
    GroupingPatternElement <|-- Group : extends

    CompositePatternElement <|-- Repeat : extends
    CompositePatternElement <|-- Or : extends

    LineElement <|-- Line : extends
    LineElement <|-- Anyline : extends

    CompositePatternElement "1" *-- "many" PatternElement : contains

    Repeat *-- Mode : nested enum
    Line "1" *-- "0..many" PropertyBinding : bindProperties
    Anyline "1" *-- "0..many" PropertyBinding : bindProperties

%% Self-referencing for recursive structure
    PatternElement ..> PatternElement : references

%% Note: compiledPattern in Line is lazily initialized on first access
