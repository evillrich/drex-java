{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Drex Pattern Schema",
  "description": "Schema for Drex document extraction patterns. Drex is a line-oriented pattern matching language for extracting structured data from semi-structured text documents. It processes documents line by line, similar to how regular expressions process character streams, with support for fuzzy matching to handle OCR noise and document variations.",
  "type": "object",
  "properties": {
    "version": { "type": "string" },
    "name": { "type": "string" },
    "comment": { "type": "string" },
    "editDistance": {
      "type": "integer",
      "minimum": 0,
      "description": "Maximum edit distance allowed for fuzzy matching. Default is 0 (exact matching)."
    },
    "elements": {
      "type": "array",
      "items": { "$ref": "#/$defs/patternElement" }
    },
    "bindObject": {
      "type": "string",
      "description": "Optional object to bind to. If present, the entire matched document binds under this key. Behaves like a group bind at the top level."
    }
  },
  "required": ["elements"],
  "$defs": {
    "group": {
      "type": "object",
      "description": "Groups pattern elements for sequential matching, similar to parentheses '()' in regex",
      "properties": {
        "comment": { "type": "string" },
        "bindObject": { "type": "string" },
        "elements": {
          "type": "array",
          "items": { "$ref": "#/$defs/patternElement" }
        }
      },
      "required": ["elements"],
      "additionalProperties": false
    },
    "repeat": {
      "type": "object",
      "description": "Repeats pattern elements with specified repetition mode, similar to quantifiers '*', '+', '?' in regex. Always produces an array output (empty array if no matches).",
      "properties": {
        "comment": { "type": "string" },
        "bindArray": { "type": "string" },
        "mode": {
          "enum": ["zeroOrMore", "oneOrMore", "zeroOrOne"],
          "description": "Repetition mode: 'zeroOrMore' (*), 'oneOrMore' (+), 'zeroOrOne' (?)"
        },
        "elements": {
          "type": "array",
          "items": { "$ref": "#/$defs/patternElement" }
        }
      },
      "required": ["mode", "elements"],
      "additionalProperties": false
    },
    "or": {
      "type": "object",
      "description": "Tries alternative pattern elements until one succeeds, similar to alternation '|' in regex",
      "properties": {
        "comment": { "type": "string" },
        "elements": {
          "type": "array",
          "items": { "$ref": "#/$defs/patternElement" }
        }
      },
      "required": ["elements"],
      "additionalProperties": false
    },
    "propertyBinding": {
      "type": "object",
      "description": "Defines how to bind a regex capture group to a JSON property",
      "properties": {
        "property": {
          "type": "string",
          "description": "The JSON property name to bind to (supports both relative and absolute paths like '$.invoice.total')"
        },
        "format": {
          "type": "string",
          "description": "Optional formatter function to normalize captured values using function call syntax"
        }
      },
      "required": ["property"],
      "additionalProperties": false
    },
    "line": {
      "type": "object",
      "description": "Matches a line against a regular expression pattern",
      "properties": {
        "comment": { "type": "string" },
        "regex": {
          "type": "string",
          "pattern": ".+",
          "description": "Regular expression pattern (cannot be empty)"
        },
        "bindProperties": {
          "type": "array",
          "items": { "$ref": "#/$defs/propertyBinding" },
          "description": "Optional array of property bindings, mapped to regex capture groups by index (first binding maps to capture group 1, etc.)"
        }
      },
      "required": ["regex"],
      "additionalProperties": false
    },
    "anyline": {
      "type": "object",
      "description": "Matches any single line, similar to '.' in regex but for entire lines. Typically used to consume lines without extracting data.",
      "properties": {
        "comment": { "type": "string" },
        "bindProperties": {
          "type": "array",
          "items": { "$ref": "#/$defs/propertyBinding" },
          "description": "Optional array of property bindings. Rarely used since anyline typically consumes unwanted lines."
        }
      },
      "additionalProperties": false
    },
    "patternElement": {
      "oneOf": [
        {
          "type": "object",
          "required": ["group"],
          "properties": { "group": { "$ref": "#/$defs/group" } }
        },
        {
          "type": "object",
          "required": ["repeat"],
          "properties": { "repeat": { "$ref": "#/$defs/repeat" } }
        },
        {
          "type": "object",
          "required": ["or"],
          "properties": { "or": { "$ref": "#/$defs/or" } }
        },
        {
          "type": "object",
          "required": ["line"],
          "properties": { "line": { "$ref": "#/$defs/line" } }
        },
        {
          "type": "object",
          "required": ["anyline"],
          "properties": { "anyline": { "$ref": "#/$defs/anyline" } }
        }
      ]
    }
  }
}
